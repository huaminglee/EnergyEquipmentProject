using System;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Management;

using System.Runtime.InteropServices;

namespace CommonMethod
{
    public class PrintCode
    {
        [DllImport("fnthex32.dll")]
        public static extern int GETFONTHEX(string ChineseText,string FontName,int Orient,
            int Height,  // font height
            int Width,   // font width
            byte IsBold,byte IsItalic,System.Text.StringBuilder ReturnPicData);

        public static void print(string code,string name)
        {
            SelectQuery selectQuery = new SelectQuery("Win32_USBHub");
            ManagementObjectSearcher searcher = new ManagementObjectSearcher(selectQuery);
            foreach (ManagementObject disk in searcher.Get())
            {
                string PNPDeviceID = disk["PNPDeviceID"] as String;
                StringBuilder hexbuf = new StringBuilder(21 * 1024);
                GETFONTHEX(name, "Arial", 0, 30, 0, 0, 0, hexbuf);

                string printText = "CT~~CD,~CC^~CT~^XA~TA000~JSN^LT0^MNW^MTT^PON^PMN^LH0,0^JMA^PR5,5~SD15^JUS^LRN^CI0^XZ~DG000.GRF,05120,040,,:::::::::::::::::::::::::::::::::::::gM010W010X060,N0380V0380I020Q03E0I0380Q0F8,N01C0N010L07C0I070Q01F0I03E0Q07C,O0F0N03C0K0FE0I07E0P03F80H03F0Q0FE,O070N0FC0K0FC0I07C0P01C0I03C0P01F8,O0780L07FF0K0F0J0380M08003E0I0380P03F0J020,O07C0I0407FHFK01C0J030H020J07001C0I0380P01E0J070,O0380380EFFE0L03C0J03800F80I03C03E0I0380P03FLFC,O0180780FF0N070010H07800FC0I01F01C0I03C0P07FLFE,O0300FE0F0O0E0038003803FE0J0F83E0I0380H080L0F80I01F8,K01FLFE070N01C0H0E003803F0K07C1C0I038001C0L07C0I01F0,L0E0I060H0F0N0380H0F80380FC0K0FC3E0I038003E0L0FE0I03E0,Q070H070N070I07C0781F0L03C1C0I03C007F0K01E20I07C0,M0E0H07800F0N0E0I03E038780L0383EFOF80J03E30I0F80,M070H07C0070M01C0I01F031E0M0101C3F00380O03C10H01F,M03800F800F80L0F80I01F83F800180K03E0I0380O0F81C003F80,M01C00F0H070M0NF07C0H010L01C0I03C0O0F00C007C,M03E00E0H0F0M07FHFE00F8380H0180K03E0I0380N01E00E00FC,M01F01C0H070M03FC0I070380H010K01FC0I0380N01C00700F0,N0F8180H0F0M0380J0E0380H0180J07BE0I0380N07800383F8,N0F010I070T040780H0180I01E1C0I03C0N070H01C3E0,N0E030060F0I020Q0380H0180I0783E0I0380N0E0H01EFC0,N0402006070I070N0400380H01C0H01F01C0I0380M010J0HF,P0601F8F80H0F80H080I0E003C0H03E0H0FE03E0I03800E0J070J0FE,K0OF87FJFC0H0F0H01F003E0H07F007F801C0I03C01F0J0C0J07C,K07FMFEFKFE0H0LF803FJFE00FE003E0I03803F80O0HF,O0380I070030K070I0F001FJFC003C001C1FMFC0N01FF80,O0380I0F80380J0F0I0E0H0JFE0H038003E0FC0K020N0FE7E0,O03C0I0700380J0F0I0E0T01C0X0F81F0,O0380I0F00380J0F0I0E0T03E0E0U03E00FE,O0380I070030K070I0E0T01C07C0T07C003F80,O0380I0F80380J0F80H0E0080Q03E03E0S03F8001FF8,O03C0100700780J0F0I0E0060Q01C01F0S07C0I07FF,O0380380F00380J0KFE00F80P030H0F80I0180K03F80I03FHF0,O03807C070030K07FIFE007C0010Q070J03C0K07C0K07FHFE0,K03FLFE0F00380J0F0I0E00F800380P0F80I0FE0J03F80K01FIF8,L0NF0F00780J0F0I0E0070H07C0P060J0HFJ01FRFC0,O0380I0E00380J0F0I0E00F0H0FE0H07FTF80H07E78003E0H0F3F80,O0380I0E0030K070I0E007001F0I0180J0F20O03E070H01C001E07,O0380I0E00380J0F80H0E00F80FE0O03E30I020I01F80F8001E0H0E,M0403C0I0E00780J0F0I0E00700F80O07C10I070I010H078001C001E,M0603880H0E00380J0F0I0E00F83E0P0F8080H0F80L078003E0H0E,M078386001C0030K070I0E007070P01F0040H0FE0L070H01C001E,M0FE383801E00380J0KFE00FBE0P07E00E003F80L078001E0H0E,M0F03C1C01C00780J0F0I0E00770Q0F8007003C0M078001C0H0E,L01E0380F03C00380J0F0I0E00FC0P03F800380F80M078003E0H0E,L01E0380703C0030K070I0E0070Q07F0H01C1E0N07FMFE,L03C0380F83800380J0F80H0E00F80I080J01FF80H0E380N0OFE,L03C03C07C70H0780J0F0I0E0070J080J07C70I0760O078001C0H0E,L07803803870H0380J0F0I0E00780I080J0F8780H0380O078003E0H0E,L07003801070H030K070I0E0070J080I03C070I01E0O070H01C001E,L0E0038038E0H0380J0F0I0E00F80I0C0I0F80F80I0F80N078001E0H0E,L0C003C001C0H0780J0F0I0E0070J0C0H07C0070H0107C0N078001C0H0E,K038003800380H0380J0F0I0E00F0J0E001E0H07803E03F80M078003E0H0E,K030H0380030I0380J070I0E0070I01C0070I0701F001FF0M070H01C001E,K060E07800E0I0780J0F80H0E00F80H01E0180I078FC0H0HFE0L0F8001E0H0E,K0407FFC00C0I0780J0F01F1E007C0H01F80K07FF0I01FHFL07FMFE,K0800FF80180I0380J0F00FFE007FKF80K0HFC0J0IFE0J07FMFE,N03F0030J0780J07003FC003FJFE0L0HFL03FF0K070L01F,N01F00E0J0380J0F0H0FC001FJF80L0FE0L0FE0K0F80L0E,O0C00C0J07C0J0F0H0780U0780L03C0K0780L0E,O080380J030K080H020V030N080K070M08,,:::::::::::::::::::::::::::";
                printText += hexbuf.ToString().Replace("OUTSTR01", "001.GRF");
                printText += "^XA" + "^MMT" + "^PW464" + "^LL0304" + "^LS0" + "^FT64,128^XG000.GRF,1,1^FS" + "^FT32,288^XG001.GRF,1,1^FS" + "^BY1,3,76^FT18,212^B3N,N,,Y,N" + "^FD"+code+"^FS"+ "^FO11,120^GB443,0,6^FS"+ "^PQ1,0,1,Y^XZ"+ "^XA^ID000.GRF^FS^XZ"+ "^XA^ID001.GRF^FS^XZ";

                //string printText = "CT~~CD,~CC^~CT~" + System.Environment.NewLine
                //    + "^XA~TA000~JSN^LT0^MNW^MTT^PON^PMN^LH0,0^JMA^PR5,5~SD15^JUS^LRN^CI0^XZ" + System.Environment.NewLine
                //    + "~DG000.GRF,05632,044," + System.Environment.NewLine
                //    + ",:::::::::::::::::::::hP020,O0C0gY010,O0E0gY03C0J080gJ02,O070P060N010M040N07E0I01E0O0C0S06,O0380O0F0O080L070N07F80I0F80N0780H080N0F80,O01E0N03F0O040L07C0M07C0I01FC0N03C0H040M01F80,O03E0N0HFC0I020I0E0L0FE0M0F80J0F80N03F800F80L03FE0,O01F0J08007FFC0I010I070L0HFM01E0J01E0O01FC00FPFE0,P0F00200E07FHFK0380H0380K0HF80K03E0K0E0H020L0FE00FQF0,P0F0060077FF0L01C0H01C0J01FE0L0780J01E0H070L07E0070J06,P0E00F80FF80N0E0H01E0J01FE0L0F80380H0E0H0F80K0FE00F80I0F80,P0C01FC070P070H01F0J01FC0L0E001C0H0E001FC0K07E00F0J0FC0,K03FMFE0F80O0780H0F80I03F80K01E0H0E0H0E007FE0K03E08F80I0F80,L07FLFE070P0380H0780I01F0L01C0H07001E007E0L01C0070I01E,L0E0J0C0H0F80O03C0H0FC0I03E0L0780H03C00E03F80L03C08F80H03E,M040I0E0H070P01E0H07E0I07E0L070I01E00E07E0M01810F0I01C,M030I0F800F80O01F0H03E0I07E0L0E0I03F00E0F80O018F80H038,M038001FC0070P01F0H01F0I07C0K03C0I01F01E3C0P01070I030H010,M03E001F800F80P0F8003F80H0F80K0F80J0FC0EF80H080L030F8080E0H038,M01F001E0H070Q07C001FC0H0F0K01F1FKFC0FC0H010O0700E040H07C,N0F803E0H0F80P0FE0H0FE0H0F0L0LFE7E0E0J080L020F80FLFE,N07801C0H070Q07F0H0FE001F0L0JFI07C1E0I010M060700FLFE,N0FC0380H0F80P03F800FE001E0L0HF80I03C0E0I01800F80H060F80F0J0FC,N07C070I070Q03F0H07F001C0L070K0381E0I018001C0H040700F0J078,N038060I0F80P03F800FF003C0L020K0380E0I018001F0H0C0F80F0J078,N038060I070Q01FC007F00380U01E0I0180H0F80040700F0J070,N0380E00C0F80I080K01FE003F00780V0E0I01C0H0FE00C0F80F0J078,N0100C01E070I01C0K01FC007F0070S020H0F0I01C0H07F0080700F0J078,Q0803F0F80H03E0L0FE003E00F0M0380I07800F0I03E0H03F8180F80F0J078,K07FNF070I07F0L0FC001C00E0M01C0I07800FC0H07F0H01F0100700F0J070,K03FNFCFLF80K0FE003E00E0M01FKFE00FLF8001F8380F80F0J0F8,K01C0H0F0J07001E0N07C001C01C0M01FKFC007FJFE0H01F0100F00FLF8,P0F0J0F801E0N0FC0J0380M01E0I0F8003FJF80I0F0300F80FLF8,P0F0J07001E0N07C0J030N01E0I070S070700700F0J070,P0F0J0F801E0N0780J0380M01E0I0F80R0E0E00F80E0J078,P0F0J07001C0N030K070N01E0I070U0600F00F0J078,P0F0J0F801E0U0E0H01C0I01E0I0F80T0E00F00F0J078,P0F0J07001E0U040H01E0I01E0I070U0400F00F0J070,P0F0J0F801E0U0C0H07F0I01E0I0F80380Q0E00F80F0J0F8,P0F001007001E0T01C0H0HF80H01E0I07001C0P01C00F00F0J078,P0F00780F801E0I01FVFC0H01FKF803F80030L01800F00F0J078,P0F007C07001E0J07FUFE0H01FKFH01F80010L01801F00F0J070,K01FMFE0F801E0J07C0X01E0I0F803E0H0780K03800F00F0J078,L0OF0F001E0gK01E0I07001C0H07C0K03001F00FLF8,L060H0F0I08F001E0O020T01E0I0F803E0H0FE0K03801E00FLF8,P0F0J07001E0O010T01E0I07001C001FF0K07001E00F0070078,P0F0J0F001E0O03C0S01E0I0F803E00FF80K0F803E00E00F80E0,P0F0J0F001E0O07C0H060O01E0I07001C00FC0L0F001C0J07,M0200F0J0E003E0O0HFI0380N01E0I0F803E03F80L0E003E0J0F80,M0100F10H01F001E0O07F8001C0N01E0I07001C07C0L01E003C0J07,M03C0F1C0H0E001E0O0FE0I0E0N01E0I0F803E0F80J03EFE003C0J0F80,M07F0F0E001E001C0N01FC0I0780M01FKFH01C1C0K01FFC007C006007,M07E0F07803E003E0N03F80I03E0M01FKF803E780L03FE007800F80F8C,M07C0F03C01C001E0N03F0J01F0M01E0I07001FC0M01FC0070H0FC0706,M0F80F03E03E001E0N0FE0K0FC0L01E0I0F803F80N0FE00F800FE0F8380,M0F00F01F01C001E0N07C0K07E0L01E0I07001C0J080I07C00F001F80701C0,M0F00F00F838003E0N0F80K03F80K01E0I0F803E0J080I03E00E003F00F81F0,L01E00F007878001E0M01F0L01FC0K01E0I07001C0O07C01E003C00700F0,L03E00F00F8F8001E0M03E0L01FE0K01E0I0F803E0J0C0I03C01E00F800F80FE,L01C00F007870H01E0M07C0M0HFL01E0I07001C0J0C0I07C01C00F0H07007F,L03800F0038E0H03E0M0F80M07F80J01E0I0F803E0J080I07803800E0H0F803F80,L070H0F0031E0H01E0M0F0N03FC0J01E0I07001C0J0C0I07C03001C0H07001F80,L0E0H0F0H01E0H01E0L01E0N03FE0J01E0I0F803E0J0C0I0FC0F803C0H0F801FC0,L0C0H0F0H01C0H01E0L01C0N01FF0J01E0I07001C0J0C0I0FC060070I070H0FC0,K0180H0F0H0380H03E0L0380O0HF80I01E0I0F803E0J0E0I0F80E00E0I0F800FE0,K010I0F0H070I01E0L070P07F0J01E0I07001C0I01E0I0FC1C01C0I070H07C0,K030381F0H0E0I01E0L0E0P03F80I01E0I0F803E0I01F80H0FC380380I0F8007C0,K0601FHFH01C0I01C0K01C0P01F80I01E01E1F001F0I01FC0H0FC1007001FHFI03C0,K0C007FE00380I03E0K0380P03F80I01E03FHFH01FLF80H0F8200E0H0IFI0380,N01FE0030J01E0K070Q01F0J01E003FF001FLFJ07C40180H01FF0H01,O0FE00E0J03E0K0E0R0F80I01E0H0FE0H0LFE0I01CC0180I0FE,O07C00C0J01E0J01C0R0F0J01E0H07C0H01FJFL010M07C,O0380380J03E0J030S060J03E0H0380T030M038,R030K01C0J060Y010I030gJ030,R0C0K02,,::::::::::::::::::::::::::::::";
                //printText += hexbuf.ToString().Replace("OUTSTR01", "001.GRF");
                //printText += "^XA" + "^MMT" + "^PW480" + "^LL0320" + "^LS0" + "^FT64,160^XG000.GRF,1,1^FS" + "^FT60,290^XG001.GRF,1,1^FS" + "^BY3,3,62^FT78,214^BCN,,Y,N" + "^FD>;"+code+"^FS" + "^FO48,136^GB391,0,6^FS" + "^PQ1,0,1,Y^XZ"
                //     + "^XA^ID000.GRF^FS^XZ" + "^XA^ID001.GRF^FS^XZ";

                BeginPrint(printText, PNPDeviceID);
            }
        }

        private static void BeginPrint(string cmd, string PNPDeviceID)
        {
            var printer = new Printer();
            if (!printer.Open(PNPDeviceID))
            { return; }
            printer.Write(cmd);
            if (!printer.Close())
            { return; }
        }
    }


    public class Printer
    {
        [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential)]
        private struct OVERLAPPED { int Internal; int InternalHigh; int Offset; int OffSetHigh; int hEvent;      }
        [System.Runtime.InteropServices.DllImport("kernel32.dll")]
        private static extern int CreateFile(string lpFileName, uint dwDesiredAccess, int dwShareMode, int lpSecurityAttributes, int dwCreationDisposition, int dwFlagsAndAttributes, int hTemplateFile);
        [System.Runtime.InteropServices.DllImport("kernel32.dll")]
        private static extern bool WriteFile(int hFile, byte[] lpBuffer, int nNumberOfBytesToWrite, out   int lpNumberOfBytesWritten, out   OVERLAPPED lpOverlapped);
        [System.Runtime.InteropServices.DllImport("kernel32.dll")]
        private static extern bool CloseHandle(int hObject);
        private int iHandle;

        public bool Open(string PNPDeviceID)
        {
            //{A5DCBF10-6530-11D2-901F-00C04FB951ED}是USB设备类的classID
            iHandle = CreateFile("\\\\.\\" + PNPDeviceID.Replace('\\', '#') + "#{A5DCBF10-6530-11D2-901F-00C04FB951ED}"
                , (uint)FileAccess.ReadWrite, 0, 0, (int)FileMode.Open, 0, 0);
            if (iHandle != -1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        public bool Write(string Mystring)
        {
            if (iHandle != -1)
            {
                int i; OVERLAPPED x;
                byte[] mybyte = System.Text.Encoding.Default.GetBytes(Mystring);
                return WriteFile(iHandle, mybyte, mybyte.Length, out i, out x);
            }
            else { throw new Exception("端口未打开!"); }
        }
        public bool Close()
        {
            return CloseHandle(iHandle);
        }
    }
}
